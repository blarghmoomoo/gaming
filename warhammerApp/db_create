pragma foreign_keys = on;
drop table if exists person;
drop table if exists gender;
drop table if exists social_status;
drop table if exists relations;
drop table if exists actions;
drop table if exists mutations;
drop table if exists insanities;
drop table if exists logg;
drop table if exists action;
drop table if exists mutation;
drop table if exists relation;
drop table if exists insanity;
drop table if exists talent;
drop table if exists skill;
drop table if exists characteristic;
drop table if exists person_characteristics;
drop table if exists career;
drop table if exists career_primary_characteristics;
drop table if exists advance_scheme;
drop table if exists person_talents;
drop table if exists action_traits;
drop table if exists trait;
drop table if exists mutation_traits;
drop table if exists insanity_traits;
drop table if exists action_traits;
create table if not exists person (uid int primary key, name , age int, gender varchar[6], social_status varchar[6], foreign key (gender) references gender(gender), foreign key (social_status) references social_status(status));
create table if not exists person_characteristics (person_uid references person(uid), characteristic references characteristic(characteristic), value int);
create unique index pci on person_characteristics (person_uid, characteristic);
create table if not exists career (uid int primary key, name varchar[20]);
create table if not exists career_primary_characteristics(career_uid references career(uid), characteristic1 references characteristic(characteristic), characteristic2 references characteristic(characteristic));
create table if not exists advance_scheme(career_uid references career(uid), action int, talent int, skill int, fortune int, conservative int, reckless int, wound int);
create table if not exists talent (talent  primary key);
create table if not exists person_talents(person_uid references person(uid), talent references talent(talent));
create table if not exists skill (skill );
create unique index ski on skill(skill);
create table if not exists characteristic (characteristic );
create unique index ci on characteristic(characteristic);
create table if not exists gender (gender varchar[6] unique);
create table if not exists social_status(status varchar[6] unique);
create table if not exists relation (relation );
create unique index ri on relation(relation);
create table if not exists action (action , description );
create unique index ai on action(action);
create table if not exists mutation (mutation );
create unique index mi on mutation(mutation);
create table if not exists insanity (insanity );
create unique index ii on insanity(insanity);
create table if not exists trait (trait);
create unique index ti on trait(trait);
create table if not exists logg(person references person(uid), date , logg );
create table if not exists relations (from_person references person(uid), to_person references person(uid), relation references relation(relation));
create table if not exists actions (person references person(uid), action references action(action));
create table if not exists mutations (person references person(uid), mutation references mutation(mutation));
create table if not exists insanities (person references person(uid), insanity references insanity(insanity));
create table if not exists insanity_traits (insanity references insanity(insanity), trait references trait(trait));
create table if not exists action_traits (action references action(action), trait references trait(trait));
create table if not exists mutation_traits (mutation references mutation(mutation), trait references trait(trait));
create table if not exists career_skills (career_uid references career(uid), skill references skill(skill));
insert into gender (gender) values ('Male');
insert into gender (gender) values ('Female');
insert into social_status (status) values ('Gold');
insert into social_status (status) values ('Silver');
insert into social_status (status) values ('Bronze');
insert into relation (relation) values ('Friend');
insert into relation (relation) values ('Enemy');
insert into relation (relation) values ('Trade partner');
insert into relation (relation) values ('Father');
insert into relation (relation) values ('Mother');
insert into relation (relation) values ('Son');
insert into relation (relation) values ('Daughter');
insert into relation (relation) values ('Brother');
insert into relation (relation) values ('Sister');
insert into relation (relation) values ('Aquaintance');